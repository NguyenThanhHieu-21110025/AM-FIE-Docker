import { Chat, ChatSession } from "../interfaces/Chat";

// API base URL
const API_BASE_URL = import.meta.env.VITE_API_URL + "/chat";

// Interface cho c√°c tham s·ªë API
export interface SendMessageParams {
  message: string;
  sessionId: string | null;
  userId: string | null;
}

export interface CreateSessionParams {
  userId: string | null;
  title: string;
}

export interface SessionResponse {
  response: string;
  sessionId?: string;
}

// Helper ƒë·ªÉ ƒë·∫£m b·∫£o Chat object c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng
export const formatChat = (msg: any): Chat => {
  return {
    id: String(msg.id || msg._id || `msg-${Date.now()}`),
    sessionId: msg.sessionId ? String(msg.sessionId) : undefined,
    role: (msg.role || (msg.userInput ? "user" : "assistant")) as
      | "user"
      | "assistant"
      | "system",
    content: String(
      msg.content || msg.text || msg.userInput || msg.botResponse || ""
    ),
    timestamp: new Date(msg.timestamp || Date.now()),
    metadata: msg.metadata || {},
    userInput:
      msg.role === "user" || msg.userInput
        ? String(msg.content || msg.userInput || "")
        : "",
    botResponse:
      msg.role === "assistant" || msg.botResponse
        ? String(msg.content || msg.botResponse || "")
        : "",
    sender: msg.role === "user" || msg.userInput ? "user" : "bot",
    text: String(
      msg.content || msg.text || msg.userInput || msg.botResponse || ""
    ),
  };
};

// Helper ƒë·ªÉ ƒë·∫£m b·∫£o ChatSession object c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng
export const formatChatSession = (session: any): ChatSession => {
  return {
    id: String(session._id || session.id),
    title: String(session.title || "Cu·ªôc tr√≤ chuy·ªán m·ªõi"),
    userId: session.userId ? String(session.userId) : undefined,
    isActive: Boolean(session.isActive !== false),
    createdAt: new Date(session.createdAt || Date.now()),
    updatedAt: new Date(session.updatedAt || Date.now()),
    messages: Array.isArray(session.messages)
      ? session.messages.map((msg: any) => formatChat(msg))
      : [],
    metadata: session.metadata || {},
  };
};

// Class ChatbotService
class ChatbotService {
  private getAuthHeaders(accessToken: string | null) {
    return {
      "Content-Type": "application/json",
      token: accessToken ? `Bearer ${accessToken}` : "",
    };
  }  // T·∫£i danh s√°ch phi√™n chat
  async fetchSessions(
    userId: string | null,
    accessToken: string | null
  ): Promise<ChatSession[]> {
    if (!userId) {
      return [];
    }

    if (!accessToken) {
      return [];
    }
  
    try {
      const response = await fetch(`${API_BASE_URL}/sessions/${userId}`, {
        headers: this.getAuthHeaders(accessToken),
      });
      
      if (response.ok) {
        const sessionsData = await response.json();
        return sessionsData.map((session: any) => formatChatSession(session));
      } else {
        const errorText = await response.text();
        console.error(`Failed to fetch sessions: ${response.status} ${response.statusText}`);
        console.error(`Error details: ${errorText}`);
        throw new Error(`${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error("Error loading sessions from API:", error);
      throw error;
    }
  }
  // T·∫°o phi√™n chat m·ªõi
  async createSession(
    { userId, title }: CreateSessionParams,
    accessToken: string | null
  ): Promise<ChatSession> {
    if (!userId) {
      console.warn("createSession: No userId provided");
      throw new Error("UserId is required to create a session");
    }

    if (!accessToken) {
      console.warn("createSession: No accessToken provided");
      throw new Error("AccessToken is required to create a session");
    }

    try {
      // T·∫°o session m·ªõi qua API
      const response = await fetch(`${API_BASE_URL}/sessions`, {
        method: "POST",
        headers: this.getAuthHeaders(accessToken),
        body: JSON.stringify({ userId, title }),
      });

      if (response.ok) {
        const sessionData = await response.json();
        return formatChatSession(sessionData);
      } else {
        const errorText = await response.text();
        console.error(`Failed to create session: ${response.status} ${response.statusText}`);
        console.error(`Error details: ${errorText}`);
        
        // N·∫øu g·∫∑p l·ªói x√°c th·ª±c (401, 403), n√©m l·ªói ƒë·ªÉ c√≥ th·ªÉ x·ª≠ l√Ω refresh token
        if (response.status === 401 || response.status === 403) {
          throw new Error(`${response.status} Authentication failed: ${response.statusText}`);
        }
        
        // Fallback t·∫°o session c·ª•c b·ªô n·∫øu c√≥ l·ªói kh√°c
        return formatChatSession({
          id: `local-session-${Date.now()}`,
          title,
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date(),
          messages: [],
        });
      }
    } catch (error) {
      console.error("Error creating new session:", error);
      
      // N√©m l·ªói l·∫°i ƒë·ªÉ component c√≥ th·ªÉ x·ª≠ l√Ω refresh token n·∫øu c·∫ßn
      if (error instanceof Error && 
          (error.message.includes("401") || error.message.includes("403"))) {
        throw error;
      }
      
      // Fallback t·∫°o session c·ª•c b·ªô n·∫øu c√≥ l·ªói kh√°c
      return formatChatSession({
        id: `local-session-${Date.now()}`,
        title,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        messages: [],
      });
    }
  }
  async updateSession(
    session: ChatSession,
    accessToken: string | null
  ): Promise<ChatSession> {
    // Only process server-side sessions (not local ones)
    if (!session.id || session.id.startsWith("local-")) {
      throw new Error("Cannot update local session");
    }

    const response = await fetch(`${API_BASE_URL}/sessions/${session.id}`, {
      method: "PUT",
      headers: this.getAuthHeaders(accessToken),
      body: JSON.stringify(session),
    });

    if (!response.ok) {
      throw new Error(`Failed to update session: ${response.status}`);
    }

    const updatedSession = await response.json();
    return formatChatSession(updatedSession);
  }
  // G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi
  async sendMessage(
    { message, sessionId, userId }: SendMessageParams,
    accessToken: string | null
  ): Promise<SessionResponse> {
    const response = await fetch(`${API_BASE_URL}/send`, {
      method: "POST",
      headers: this.getAuthHeaders(accessToken),
      body: JSON.stringify({ message, sessionId, userId }),
    });

    if (!response.ok) {
      throw new Error(`Server responded with status: ${response.status}`);
    }

    return await response.json();
  }

  // X√≥a phi√™n chat
  async deleteSession(
    sessionId: string,
    userId: string | null,
    accessToken: string | null
  ): Promise<void> {
    if (!sessionId.startsWith("local-") && userId) {
      await fetch(`${API_BASE_URL}/sessions/${sessionId}`, {
        method: "DELETE",
        headers: this.getAuthHeaders(accessToken),
      });
    }
  }

  // L·∫•y chi ti·∫øt phi√™n chat
  async fetchSessionDetail(
    sessionId: string,
    accessToken: string | null
  ): Promise<ChatSession> {
    const response = await fetch(
      `${API_BASE_URL}/sessions/detail/${sessionId}`,
      {
        headers: this.getAuthHeaders(accessToken),
      }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch session detail: ${response.status}`);
    }

    const sessionData = await response.json();
    const formattedSession = formatChatSession(sessionData);

    // Ki·ªÉm tra xem ƒë√£ c√≥ tin nh·∫Øn welcome ch∆∞a
    const hasWelcomeMessage = formattedSession.messages?.some((msg) =>
      msg.content?.includes("Xin ch√†o! T√¥i l√† Tr·ª£ l√Ω Qu·∫£n l√Ω T√†i s·∫£n")
    );

    // N·∫øu ch∆∞a c√≥, th√™m v√†o
    if (!hasWelcomeMessage) {
      const welcomeMessage = this.createWelcomeMessage(sessionId);
      formattedSession.messages = [
        welcomeMessage,
        ...(formattedSession.messages || []),
      ];
    }

    return formattedSession;
  }

  // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ phi√™n chat
  updateSessionTitle(
    sessions: ChatSession[],
    sessionId: string,
    message: string
  ): ChatSession[] {
    const title =
      message.length > 30 ? `${message.substring(0, 30)}...` : message;

    return sessions.map((session) =>
      session.id === sessionId ? { ...session, title } : session
    );
  }

  // T·∫°o tin nh·∫Øn ch√†o m·ª´ng
  createWelcomeMessage(sessionId: string): Chat {
    return formatChat({
      id: `msg-welcome-${Date.now()}`,
      sessionId,
      role: "assistant",
      content:
        "üëã Xin ch√†o! T√¥i l√† Tr·ª£ l√Ω Qu·∫£n l√Ω T√†i s·∫£n c·ªßa To√† nh√† F1 - Tr∆∞·ªùng ƒê·∫°i h·ªçc S∆∞ ph·∫°m K·ªπ thu·∫≠t TP.HCM (HCMUTE).\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Tra c·ª©u th√¥ng tin v·ªÅ t√†i s·∫£n trong tr∆∞·ªùng\n‚Ä¢ T√¨m ki·∫øm t√†i s·∫£n theo ph√≤ng, m√£ s·ªë, nƒÉm s·ª≠ d·ª•ng\n‚Ä¢ Cung c·∫•p th√¥ng tin v·ªÅ gi√° tr·ªã, t√¨nh tr·∫°ng t√†i s·∫£n\n‚Ä¢ Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω t√†i s·∫£n\n\nH√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n!",
      timestamp: new Date(),
    });
  }
}

export default new ChatbotService();
